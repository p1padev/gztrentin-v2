---
import { Image } from 'astro:assets';
import logo from '../assets/logo-gzt.svg';
import ArrowIcon from './ArrowIcon.astro';
---

<div
  class="fixed z-50 w-full border-b shadow-lg border-b-1 border-slate-200 bg-white/95 shadow-slate-700/5 after:absolute after:top-full after:left-0 after:z-10 after:block after:h-px after:w-full after:bg-slate-200 lg:border-slate-200 lg:backdrop-blur-sm lg:after:hidden"
>
  <div
    class="relative mx-auto max-w-full px-6 lg:max-w-5xl xl:max-w-7xl 2xl:max-w-[96rem]"
  >
    <nav
      aria-label="Navegação"
      class="flex min-h-[60px] md:min-h-[90px] justify-center items-center font-medium text-slate-700 lg:justify-between"
    >
      <Image
        src={logo}
        class="h-[55px] w-[55px] md:h-[75px] md:w-[75px]"
        width={75}
        height={75}
        alt=""
      />
      <button
        class="absolute left-10 visible block w-10 h-10 opacity-100 lg:hidden mobile-btn"
        aria-expanded="false"
        aria-label="Abrir menu de navegação"
      >
        <div
          class="absolute w-6 transform -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2"
        >
          <span
            aria-hidden="true"
            class="absolute block h-0.5 w-9/12 -translate-y-2 transform rounded-full bg-slate-900 transition-all duration-300"
          ></span>
          <span
            aria-hidden="true"
            class="absolute block h-0.5 w-6 transform rounded-full bg-slate-900 transition duration-300"
          ></span>
          <span
            aria-hidden="true"
            class="absolute block h-0.5 w-1/2 origin-top-left translate-y-2 transform rounded-full bg-slate-900 transition-all duration-300"
          ></span>
        </div>
      </button>
      <ul
        role="menu"
        aria-label="Selecionar página"
        class="mobile-menu invisible absolute top-0 left-0 z-[-1] ml-auto h-screen w-full justify-center overflow-hidden overflow-y-auto overscroll-contain bg-white/95 px-8 pb-12 pt-28 font-bold opacity-0 transition-[opacity,visibility] duration-300 lg:visible lg:relative lg:top-0 lg:z-0 lg:flex lg:h-full lg:w-auto lg:items-center lg:overflow-visible lg:bg-white/0 lg:px-0 lg:py-0 lg:pt-0 lg:opacity-100"
      >
        <li role="menuitem" class="flex items-stretch">
          <a
            aria-haspopup="false"
            class="flex items-center gap-2 py-4 transition-colors duration-300 hover:text-gray-500 focus:text-gray-600 lg:px-8"
            href="#escritorio"><span>O escritório</span></a
          >
        </li>
        <li role="menuitem" class="flex items-stretch">
          <a
            aria-haspopup="false"
            class="flex items-center gap-2 py-4 transition-colors duration-300 hover:text-gray-500 focus:text-gray-600 lg:px-8"
            href="#atuação"
          >
            <span>Áreas de atuação</span></a
          >
        </li>
        <li role="menuitem" class="flex items-stretch">
          <a
            aria-haspopup="false"
            class="flex items-center gap-2 py-4 transition-colors duration-300 hover:text-gray-500 focus:text-gray-600 lg:px-8"
            href="#como-funciona"
          >
            <span>Como funciona</span></a
          >
        </li>
        <li role="menuitem" class="items-center">
          <a href="#contato" class="btn btn-primary">
            <span>Entre em contato</span>
            <ArrowIcon />
          </a>
        </li>
      </ul>
    </nav>
  </div>
</div>

<script>
  type state = boolean;
  type callback = (state: state) => void;

  class MenuState {
    menuIsOpen: boolean;
    subs: Array<callback>;

    constructor() {
      this.menuIsOpen = false;
      this.subs = [];
    }

    notifySubs() {
      this.subs.forEach((callback) => callback(this.menuIsOpen));
    }

    subscribe(callback: callback) {
      this.subs.push(callback);
    }

    isOpen() {
      return this.menuIsOpen;
    }

    changeState() {
      this.menuIsOpen = !this.menuIsOpen;
      this.notifySubs();
    }
  }

  document.addEventListener('DOMContentLoaded', function () {
    const mobileBtn = document.querySelector(
      '.mobile-btn'
    ) as HTMLButtonElement;
    const mobileMenu = document.querySelector(
      '.mobile-menu'
    ) as HTMLUListElement;
    const mobileLinks = document.querySelectorAll('.mobile-menu a');

    const state = new MenuState();

    mobileLinks.forEach((link) => {
      link.addEventListener('click', () => {
        if (state.isOpen()) {
          state.changeState();
        }
      });
    });

    mobileBtn.addEventListener('click', function () {
      state.changeState();
    });

    function updateNav(menuIsOpen: state) {
      mobileBtn.setAttribute('aria-expanded', menuIsOpen ? 'true' : 'false');

      mobileMenu.classList.toggle('visible', menuIsOpen);
      mobileMenu.classList.toggle('opacity-100', menuIsOpen);
      mobileMenu.classList.toggle('backdrop-blur-sm', menuIsOpen);
      mobileMenu.classList.toggle('invisible', !menuIsOpen);
      mobileMenu.classList.toggle('opacity-0', !menuIsOpen);

      if (menuIsOpen) {
        mobileBtn.classList.add(
          'visible',
          'opacity-100',
          '[&_span:nth-child(1)]:w-6',
          '[&_span:nth-child(1)]:translate-y-0',
          '[&_span:nth-child(1)]:rotate-45',
          '[&_span:nth-child(2)]:-rotate-45',
          '[&_span:nth-child(3)]:w-0'
        );
      } else {
        mobileBtn.classList.remove(
          'visible',
          'opacity-100',
          '[&_span:nth-child(1)]:w-6',
          '[&_span:nth-child(1)]:translate-y-0',
          '[&_span:nth-child(1)]:rotate-45',
          '[&_span:nth-child(2)]:-rotate-45',
          '[&_span:nth-child(3)]:w-0'
        );
      }
    }

    state.subscribe(updateNav);
  });
</script>
